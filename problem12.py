"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""
import time

start_time = time.time()

def gen_triangle_numbers_list(n):
    """
    return a list of the first n triangle numbers
    """
    return [sum(range(1, i+1)) for i in range(1, n+1)]


def gen_nth_triangle_number(n):
    return sum(range(1, n+1))


def get_divisors(n):
    divisors = []
    for i in range(1, int(n**0.5)+ 1):
        if n % i == 0:
            divisors.append(i)
            if n/i != 1:
                divisors.append(int(n/i))
    return divisors


current_triangle_number = 0
max_divisor_count = 0
n = 1

while max_divisor_count < 500:
    current_triangle_number = gen_nth_triangle_number(n)
    current_divisors = get_divisors(current_triangle_number)
    if len(current_divisors) > max_divisor_count:
        max_divisor_count = len(current_divisors)
    n = n + 1

print("Answer = %s" % current_triangle_number)


print("--- %s seconds ---" % (time.time() - start_time))
